# ex: set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab:
---
- name: Check and setup file-system
  hosts: localhost
  gather_facts: true

  vars_files:
    - "vars/{{ overwrite_distribution | default(ansible_distribution) }}.yml"
    - "vars/{{ overwrite_distribution | default(ansible_distribution) }}-{{ overwrite_machine | default(ansible_machine) }}.yml"

  vars:
    zpool_number: "{{ '{:0>2}'.format( zpool_number ) }}"
    root_zfs_pool: "zroot_{{ zpool_number }}"
    distro_filesystem_path: "{{ root_zfs_pool }}/ROOT/{{ ansible_distribution }}"

  roles:
    - name: Check & Confirm Variables
      role: check_and_confirm_variables
      tags:
        - check_and_confirm_variables

    - name: Setup/Config Filesystem
      role: setup_filesystem
      tags:
        - setup_filesystem
        #- create_filesystem
        #- mount_filesystem

    - name: Install Base OS
      role: strap_os
      tags:
        - strap_os


- name: Setup chroot environment
  hosts: localhost
  gather_facts: false
  tags:
    - pre-chroot

  tasks:
    - name: Pre-mounting for chroot
      ansible.builtin.command:
        warn: no
        cmd: >-
          mount '{{ item.src }}' '{{ item.dest }}'
          {% if item.bind | default(False) %}
          --bind
          {% else %}
          --types '{{ item.type }}' --options '{{ item.options | join(",") }}'
          {% endif %}
      loop: "{{ mounting_chroot }}"


- name: Install Operation System
  hosts: chroot
  connection: chroot
  gather_facts: true

  tags:
    - chroot

  vars_files:
    - "vars/{{ overwrite_distribution | default(ansible_distribution) }}.yml"
    - "vars/{{ overwrite_distribution | default(ansible_distribution) }}-{{ overwrite_machine | default(ansible_machine) }}.yml"

  vars:
    ansible_chroot_exe: chroot
    zpool_number: "{{ '{:0>2}'.format( zpool_number ) }}"
    root_zfs_pool: "zroot_{{ zpool_number }}"
    distro_filesystem_path: "{{ root_zfs_pool }}/ROOT/{{ ansible_distribution }}"
    distro_filesystem_path_without_zpool: "/ROOT/{{ ansible_distribution }}"
    locale:
      - en_DK
      - da_DK
      - en_US
    enable_services:
      - zfs.target
      - zfs-mount.service
      - zfs-import.target
      - zfs-import-scan.service
      - systemd-networkd.service
      - systemd-resolved.service
      - systemd-timesyncd.service
      - sshd.service

  roles:
    - name: Config The System For Patch Management
      role: verify_system
      tags:
        - verify_system
        - verify_system_first
      vars:
        no_systemd: true

    - name: OS specific setup
      role: os_specific_setup
      tags:
        - os_specific_setup

    - name: Install Grub
      role: grub_install
      tags:
        - grub_install
        - install_grub

    - name: Config Grub
      role: grub_mkconfig
      tags:
        - config_grub

    - name: Install Linux
      role: install_linux
      tags:
        - install_linux

    - name: Config The System For Patch Management
      role: verify_system
      tags:
        - verify_system
        - verify_system_second
      vars:
        no_systemd: true

  post_tasks:
    - name: Enable services
      ansible.builtin.command:
        cmd: "systemctl enable {{ item }}"
      loop: "{{ enable_services }}"
      tags:
        - test

### TODO: Don't have the loop variables hardcoded
    - name: Fake mounts for 
      mount:
          path: "{{ item }}"
          src: "none"
          fstype: "none"
          opts: "fake,x-systemd.requires=zfs-mount.service"
          state: present
      loop:
        - "/var"
        - "/var/log"
      tags:
        - test

    - name: Clean up folders
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/cache/pacman/pkg
      tags:
        - test

    - file:
        path: "{{ item }}"
        state: directory
      loop:
        - /var/cache/pacman/pkg
      tags:
        - test


- name: Teardown chroot environment
  hosts: localhost
  gather_facts: false
  tags:
    - post-chroot

  vars_files:
    - "vars/{{ overwrite_distribution | default(ansible_distribution) }}.yml"
    - "vars/{{ overwrite_distribution | default(ansible_distribution) }}-{{ overwrite_machine | default(ansible_machine) }}.yml"

  tasks:
    - zfs_facts:
        name:
        recurse: yes

    - name: Initiate variable 'root_zfs_pool'
      set_fact:
        # the workaround is to added 'to_json | from_json' and when it work (it is magic)
        root_zfs_pool: "{{ ansible_zfs_datasets | to_json | from_json | json_query(filter) | first | regex_replace('/.+', '') }}"
      vars:
        filter: "[?mountpoint=='{{ next_boot_mountpoint }}'].name"

    - name: "Kill all process there using the {{ next_boot_mountpoint }}"
      shell: sudo lsof | grep '{{ next_boot_mountpoint }}' | awk '{print $2}' | uniq | sudo xargs -r kill

    - name: Umount the entire chroot envirement
      ansible.builtin.command:
        cmd: "umount --verbose --recursive '{{ next_boot_mountpoint }}'"
      register: _result

    - name: Umount the entire chroot envirement (debug)
      debug:
        var: _result

    - name: "Export {{ root_zfs_pool }} pool"
      ansible.builtin.command:
        cmd: "zpool export '{{ root_zfs_pool }}'"

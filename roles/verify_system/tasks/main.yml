# ex: set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab:
---
- name: "Config and maintain the patch_user: {{ patch_user }}"
  include_tasks: "patch_user.yml"


### TODO: remove this at some point
- name: "Remove old folder bind {{ package_mgmt_data.new_dst }} -> {{ package_mgmt_data.origin }}"
  mount:
    src: "{{ package_mgmt_data.new_dst }}"
    path: "{{ package_mgmt_data.origin }}"
    opts: bind,x-systemd.requires=zfs-mount.service
    fstype: none
    state: absent


### Config Package Manager
- name: Check if package manager DB (origin folder) exist
  stat:
    path: "{{ package_mgmt_data.origin }}"
  register: _package_mgmt_origin_folder

- name: Check if pacman (origin folder) contains any files
  find:
    path: "{{ package_mgmt_data.origin }}"
    patterns: '*'
    file_type: any
    recurse: no
  when:
    - _package_mgmt_origin_folder.stat.exists
    - _package_mgmt_origin_folder.stat.isdir
  register: _search_result

- name: "If the path {{ package_mgmt_data.origin }} contains data, move it to {{ package_mgmt_data.dst }}"
  block:
    - name: "Delete the folder {{ patch_user_home }}/pacman, if it exist"
      file:
        path: "{{ patch_user_home }}/pacman"
        state: absent

    - name: "Move the folder {{ package_mgmt_data.origin }} -> {{ package_mgmt_data.new_dst }}"
      command: "mv '{{ package_mgmt_data.origin }}' '{{ package_mgmt_data.new_dst }}'"
  when:
    - _search_result.matched is defined
    - _search_result.matched > 0

- name: "Config package manager"
  include_tasks: "{{ os }}/package_mgmt.yml"


### TODO: find a way to use "visudo -cf" to verify that the file is valid
- name: Install the sudo rule for Patch Management
  template:
    src: "patchmgmt/{{ os }}.j2"
    dest: "/etc/sudoers.d/patchmgmt"
    owner: root
    group: root
    mode: 0440
  when: root_user

- name: Configurate & Setup service files
  include_tasks: gpg.yml

- name: "Config ZFS"
  include_tasks: "zfs.yml"

- name: Check for the git binary
  stat:
    path: /usr/bin/git
  register: _git_stat

- name: Install the patchmgmt with git
  become: true
  become_user: "{{ patch_user }}"
  git:
    repo: 'https://github.com/dvaerum/zfs_maintainer.git'
    dest: "{{ patch_user_home }}/atomic_update"
    update: no
  when:
    - _git_stat.stat.exists
    - _git_stat.stat.isreg

- name: Install the patchmgmt with git
  become: true
  become_user: "{{ patch_user }}"
  ansible.builtin.file:
    path: "{{ patch_user_home }}/atomic_update/vars/custom_patchmgmt.yml"
    state: touch
    mode: u=rw,g=r,o=r
  when:
    - _git_stat.stat.exists
    - _git_stat.stat.isreg


- name: Configurate & Setup service files
  include: patch_service.yml

- name: Install/Update the mkinitcpio module
  include: systemd-generator.yml
  when: root_user

# ex: set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab:
---
- name: Reads the entire grub.cfg.j2 file
  local_action:
    module: command
    cmd: "cat {{ playbook_dir }}/roles/grub_mkconfig/templates/grub.cfg.j2"
  register: _grub_cfg

- name: Read the grub.cfg file for backup
  command:
    cmd: "sudo cat /boot/grub/grub.cfg"
    warn: no
  register: _old_grub_cfg

- name: Generates a new grub.cfg file based on a template
  shell: |
    cat <<'zzzEOFzzz' | python3 | sudo /usr/bin/tee "/boot/grub/grub.cfg"
    import sys
    from jinja2 import Template, Environment, StrictUndefined
    from jinja2.exceptions import UndefinedError

    template = Template("""{{_grub_cfg.stdout}}""")
    template.environment.undefined = StrictUndefined

    try:
      grub_config = template.render(
        distro_filesystem_path_without_zpool = "{{ distro_filesystem_path_without_zpool }}",
        kernel_path_dir = "{{ kernel_path_dir }}",
        kernel_filename = "{{ kernel_filename }}",
        initrd_filename = "{{ initrd_filename }}",
        initrd_fallback_filename = "{{ initrd_fallback_filename }}",
        root_zfs_pool = "{{ root_zfs_pool }}",
        kernel_boot_cmd_extra = "{{ kernel_boot_cmd_extra }}",
        consoles = list(map(lambda sc: 'console={}'.format(sc), {{ serial_console }}))
      )
      print(grub_config)
    except UndefinedError as e:
      print(e, file=sys.stderr)
      print("""{{ _old_grub_cfg.stdout }}""")
    zzzEOFzzz
  register: _result

- name: Generates a new grub.cfg file based on a template (Failed)
  fail:
    msg: "{{ 'Error:\n{}'.format(_result.stderr_lines | join('\n')) }}"
  when: _result.stderr_lines | count > 0

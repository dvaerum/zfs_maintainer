# ex: set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab:
---
### Notes
# dennis@DennisPC ~/D/P/zfs_maintainer> sudo fdisk -l /dev/sde
# Disk /dev/sde: 29,83 GiB, 32010928128 bytes, 62521344 sectors
# Disk model: SD/MMC/MS PRO   
# Units: sectors of 1 * 512 = 512 bytes
# Sector size (logical/physical): 512 bytes / 512 bytes
# I/O size (minimum/optimal): 512 bytes / 512 bytes
# Disklabel type: gpt
# Disk identifier: E8A84537-5A30-483B-8672-A727EB3D4D8E
# 
# Device       Start      End  Sectors  Size Type
# /dev/sde1     2048  2099199  2097152    1G EFI System
# /dev/sde2  2099200 62521310 60422111 28,8G FreeBSD ZFS
###

- name: Create boot partition (EFI)
  parted:
    device: "{{ install_device }}"
    label: "{{ partition.table }}"
    part_type: primary
    number: "{{ partition.boot.number }}"
    name: "{{ partition.boot.name | default(omit) }}"
    part_start: "{{ partition.boot.buffer }}MiB"
    part_end: "{{ partition.boot.size + partition.boot.buffer }}MiB"
    flags: "{{ partition.boot.flags | default(omit) }}"
    unit: MiB
    state: present
  tags:
    - create_filesystem
  register: _result_boot_partition

- name: Create boot partition (EFI) (debug)
  debug:
    var: _result_boot_partition
  tags:
    - create_filesystem
    
- name: Create zfs partition
  parted:
    device: "{{ install_device }}"
    label: "{{ partition.table }}"
    part_type: primary
    number: "{{ partition.zfs.number }}"
    part_start: "{{ partition.boot.size + partition.boot.buffer }}MiB"
    part_end: "100%"
    unit: MiB
    state: present
  tags:
    - create_filesystem
  register: _result_zfs_partition

- name: Create zfs partition (debug)
  debug:
    var: _result_zfs_partition
  tags:
    - create_filesystem

- name: Guess partition prefix, if any
  stat:
    path: "{{ install_device }}{{ item }}{{ partition.boot.number }}"
  register: _partition_prefix
  with_items:
    - ''
    - 'p'

- name: Guess partition prefix, if any (debug)
  debug:
    var: _partition_prefix
  when: debug | default(false)
  tags:
    - create_filesystem

- name: Guess partition prefix, if any (set_facts)
  set_fact:
    _partition_prefix: "{{ _partition_prefix | json_query(_filter) | first }}"
  vars:
    _filter: "results[?stat.exists].item"

- name: Format boot partition (EFI)
  filesystem:
    dev: "{{ install_device }}{{ _partition_prefix }}{{ partition.boot.number }}"
    fstype: vfat
    opts: "-F 32 -n {{ partition.boot.boot.name | default('BOOT') }}"
    force: yes
  tags:
    - create_filesystem

- name: Format zfs partition
  ansible.builtin.command:
    cmd: >-
      zpool create -d -f
      -m none
      -R '{{ next_boot_mountpoint }}'
      -o ashift=13
      -o feature@allocation_classes=enabled
      -o feature@async_destroy=enabled
      -o feature@bookmarks=enabled
      -o feature@embedded_data=enabled
      -o feature@empty_bpobj=enabled
      -o feature@enabled_txg=enabled
      -o feature@extensible_dataset=enabled
      -o feature@filesystem_limits=enabled
      -o feature@hole_birth=enabled
      -o feature@large_blocks=enabled
      -o feature@lz4_compress=enabled
      -o feature@project_quota=enabled
      -o feature@resilver_defer=enabled
      -o feature@spacemap_histogram=enabled
      -o feature@spacemap_v2=enabled
      -o feature@userobj_accounting=enabled
      -o feature@zpool_checkpoint=enabled
      '{{ root_zfs_pool }}' '{{ install_device }}{{ _partition_prefix }}{{ partition.zfs.number }}'
  register: result
  tags:
    - create_filesystem
  
- debug:
    var: result
  when: debug | default(false)
  tags:
    - create_filesystem
    
- name: Get boot partition info
  parted: "device={{ install_device }} unit=MiB"
  register: _install_device_info
  when: debug | default(false)
  tags:
    - create_filesystem
  
- debug:
    var: _install_device_info
  when: debug | default(false)
  tags:
    - create_filesystem

- name: "Config the zpool filesystem {{ root_zfs_pool }}"
  zfs:
    name: "{{ root_zfs_pool }}"
    state: present
    extra_zfs_properties:
      mountpoint: none
      compression: lz4
  tags:
    - create_filesystem
    
- name: "Config the zpool filesystem"
  zfs:
    name: "{{ root_zfs_pool }}/{{ item.filesystem }}"
    state: present
    extra_zfs_properties:
      mountpoint: "{{ item.mountpoint | default(omit) }}"
      canmount: "{{ item.canmount | default(omit) }}"
      acltype: "{{ item.acltype | default(omit) }}"
  with_items: "{{ zfs_filesystem_structure }}"
  tags:
    - create_filesystem

- name: "Export the newly create zpool '{{ root_zfs_pool }}'"
  ansible.builtin.command:
    cmd: "zpool export '{{ root_zfs_pool }}'"
  tags:
    - create_filesystem

- name: "Make sure the path '{{ next_boot_mountpoint }}' get removed"
  file:
    path: "{{ next_boot_mountpoint }}"
    state: absent
  tags:
    - create_filesystem

- name: "Re-import the newly create zpool '{{ root_zfs_pool }}'"
  ansible.builtin.command:
    cmd: >-
      zpool import -f -N
      -d '/dev/disk/by-id'
      -R '{{ next_boot_mountpoint }}'
      '{{ root_zfs_pool }}'
  tags:
    - mount_filesystem

- name: "Manually mount the filesystem '{{ distro_filesystem_path }}'"
  ansible.builtin.command:
    cmd: "zfs mount '{{ distro_filesystem_path }}'"
  tags:
    - mount_filesystem

- name: "Make path to the boot partition"
  file:
    path: "{{ next_boot_mountpoint }}{{mountpoint_efi_partition}}"
    state: directory
    recurse: yes
    owner: root
    group: root
  tags:
    - mount_filesystem

- name: "Mount the boot partition"
  ansible.builtin.command:
    cmd: "mount --verbose '{{ install_device }}{{ _partition_prefix }}{{ partition.boot.number }}' '{{ next_boot_mountpoint }}{{mountpoint_efi_partition}}'"
  tags:
    - mount_filesystem

- name: Mount all zfs filesystems
  ansible.builtin.command:
    cmd: "zfs mount -a"
  tags:
    - mount_filesystem

- name: "Set the bootfs option for zpool '{{ root_zfs_pool }}'"
  ansible.builtin.command:
    cmd: "zpool set 'bootfs={{ distro_filesystem_path }}' '{{ root_zfs_pool }}'"
  tags:
    - mount_filesystem

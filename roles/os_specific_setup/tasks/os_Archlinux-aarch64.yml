# ex: set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab:
---
- name: Create pacman keys
  command: pacman-key --init
  register: _result

- name: Create pacman keys (debug)
  debug:
    var: _result

- name: "Find all the keyring packages"
  find:
    path: /var/cache/pacman/pkg
    patterns: "^({{ keyring_packages | join('|') }}).+[.](xz|zst)$"
    use_regex: yes
  register: _keyring_package_paths

- name: "Find all the keyring packages (debug)"
  debug:
    var: _keyring_package_paths | json_query('files[*].path')

- name: "Find all the keyring packages (set_fact)"
  set_fact:
    _keyring_package_paths: "{{ _keyring_package_paths | json_query('files[*].path') }}"

- name: "Find all the keyring packages (debug)"
  debug:
    var: _keyring_package_paths

- name: "Find all the keyring packages (fail)"
  fail:
    msg: "Something is wrong, there are suppose to be a equal amount of entries in keyring_packages (count: {{ keyring_packages }} and _keyring_package_paths (count: {{ _keyring_package_paths }}))"
  when: _keyring_package_paths | count != keyring_packages | count

- name: "Install keyring for {{ os }}"
  shell: "pacman -U --noconfirm {{ _keyring_package_paths | join(' ') }} || pacman-key --populate"
  register: _result
  until:
    - _result | json_query("stdout_lines[?@ == '==> Locally signing trusted keys in keyring...']") | count == keyring_packages | count
  retries: 10
  delay: 10

- name: "Install keyring for {{ os }} (debug)"
  debug:
    var: _result

- name: Install Raspberry-PI bootloader & firmware packages
  pacman:
    name:
      - raspberrypi-bootloader
      - raspberrypi-bootloader-x
      - firmware-raspberrypi
      - "{{ uboot_package }}"
      - uboot-tools
    state: latest
    update_cache: yes
    update_cache_extra_args: --needed
  register: _result

- name: Install packages (debug)
  debug:
    var: _result

- name: Config /boot/boot.txt
  copy:
    content: |

      load mmc 0:1 ${loadaddr} EFI/BOOT/BOOTAA64.EFI
      bootefi ${loadaddr}

    dest: "/boot/boot.txt"
    owner: root
    group: root
    mode: 0444

- name: Generate /boot/boot.scr (u-boot script)
  command: >-
    mkimage -A arm 
    -O linux
    -T script
    -C none
    -n "U-Boot boot script"
    -d /boot/boot.txt
    /boot/boot.scr

### Config pacman hook for copying the kernel to {{ kernel_path_dir }}
- name: "Make sure that the folder /etc/pacman.d/hooks exist"
  file:
    path: "/etc/pacman.d/hooks"
    state: directory
    owner: "root"
    group: "root"
    mode: 0755

- name: Create pacman hook for copying the kernel
  copy:
    content: |
      [Trigger]
      Type = Package
      Operation = Install
      Operation = Upgrade
      Target = {{ kernel_package }}

      [Action]
      Description = Copy the kernel from the /boot to {{ kernel_path_dir }} ...
      When = PostTransaction
      Exec = /usr/bin/cp /boot/Image /boot/Image.gz {{ kernel_path_dir }}
    dest: "/etc/pacman.d/hooks/copy_kernel.hook"
    owner: root
    group: root
    mode: 0444

